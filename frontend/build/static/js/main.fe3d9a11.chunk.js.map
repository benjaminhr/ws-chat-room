{"version":3,"sources":["components/MessageForm/MessageForm.js","components/Messages/Messages.js","components/Username/Username.js","components/Error/Error.js","components/App/App.js","serviceWorker.js","index.js"],"names":["MessageForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","socket","onSubmit","bind","assertThisInitialized","WebSocket","setState","e","preventDefault","localStorage","getItem","event","CustomEvent","detail","type","message","window","dispatchEvent","length","sendMessage","readyState","username","msg","JSON","stringify","text","timestamp","Number","Date","sender","send","console","log","location","reload","_this2","react_default","a","createElement","className","autoComplete","placeholder","autoFocus","onChange","target","React","Component","Messages","props","messages","map","key","_id","Username","submitUsername","setItem","Error","closeModal","onClick","App","error","errorMessage","addEventListener","parse","data","toConsumableArray","concat","Fragment","components_Error_Error","components_Username_Username","components_Messages_Messages","components_MessageForm_MessageForm","Boolean","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe3d9a11.chunk.js","sourcesContent":["import React from 'react'\n\nclass MessageForm extends React.Component {\n  constructor() {\n    super()\n\n    this.state = {\n      value: '',\n      socket: null\n    }\n\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  componentDidMount() {\n    const socket = new WebSocket('ws://35.228.115.67') \n    this.setState({ socket })\n  }\n\n\n  onSubmit(e) {\n    e.preventDefault()\n\n    if (!localStorage.getItem('username')) {\n      const event = new CustomEvent('error', {\n        detail: {\n          type:'new', \n          message: 'You must create a username before you can send messages.'\n        }\n      })\n\n      window.dispatchEvent(event)\n    }\n\n    if (this.state.value.length >= 1) {\n      this.sendMessage()\n    } \n  }\n\n  sendMessage() {\n    if (this.state.socket.readyState === 1) {\n      const username = localStorage.getItem('username')\n      \n      const msg = JSON.stringify({\n        type: \"new\",\n        message: {\n          text: this.state.value, \n          timestamp: Number(new Date()),\n          sender: username\n        }\n      })\n\n      this.state.socket.send(msg)\n      this.setState({ value: '' })\n    } else {\n      console.log('Unable to connect to websocket')\n      window.location.reload()\n    }\n  }\n\n  render() {\n    return (\n      <form \n        className=\"message-form\" \n        onSubmit={this.onSubmit}\n        autoComplete=\"off\"\n      >\n        <input \n          type=\"text\" \n          className=\"message-input\" \n          placeholder=\"Type your message...\" \n          autoFocus\n          value={this.state.value}\n          onChange={e => this.setState({ value: e.target.value })}\n        />\n        <button className=\"send-button\">\n          ▻\n        </button>\n      </form>\n    )\n  }\n}\n\nexport default MessageForm","import React from 'react'\n\nclass Messages extends React.Component {\n  render() {\n    return (\n      <ul className=\"messages\">\n        {this.props.messages.map(message => {\n          return (\n            <li key={message._id}>\n              <span className=\"sender\">{message.sender}:</span> {message.text}\n            </li>\n          )\n        })}\n      </ul>\n    )\n  }\n}\n\nexport default Messages","import React from 'react'\n\nclass Username extends React.Component {\n  constructor() {\n    super()\n\n    this.state = {\n      username: '' \n    }\n\n    this.submitUsername = this.submitUsername.bind(this)\n  }\n\n  submitUsername(e) {\n    e.preventDefault()\n    const { username } = this.state\n\n    if (username.length <= 2) {\n      const event = new CustomEvent('error', {\n        detail: {\n          type:'new', \n          message: 'Username must be at least 3 characters.'\n        }\n      })      \n\n      window.dispatchEvent(event)\n    } else {\n      localStorage.setItem('username', username)\n      this.setState({ username: '' })\n    }\n  }\n\n  render() {\n    return (\n      <form \n        className=\"username\"\n        onSubmit={this.submitUsername}\n      >\n        <input \n          type=\"text\"\n          onChange={e => this.setState({ username: e.target.value })}\n          placeholder=\"Enter username...\"\n          autoFocus\n          autoComplete=\"false\"\n          value={this.state.username}\n        />\n        <button>\n          Submit\n        </button>\n      </form>\n    )\n  }\n}\n\nexport default Username;","import React from 'react'\n\nclass Error extends React.Component {\n  constructor() {\n    super()\n\n    this.closeModal = this.closeModal.bind(this)\n  }\n\n  closeModal() {\n    const event = new CustomEvent('error', { \n      detail: {\n        type: 'close'\n      }\n    })\n\n    window.dispatchEvent(event)\n  }\n\n  render() {\n    return (\n      <div className=\"error-modal\">\n        <div className=\"error\">\n          <h1>{this.props.message}</h1>\n          <button onClick={this.closeModal}>\n            X\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Error;","import React, { Component } from 'react'\nimport MessageForm from '../MessageForm/MessageForm.js'\nimport Messages from '../Messages/Messages.js'\nimport Username from '../Username/Username.js'\nimport Error from '../Error/Error.js'\nimport '../../styles/app.css'\n\nclass App extends Component {\n  constructor() {\n    super()\n    \n    this.state = {\n      messages: [],\n      error:false,\n      errorMessage: ''\n    }\n  }\n\n  componentDidMount() {\n    const socket = new WebSocket(\"ws://35.228.115.67\")\n\n    socket.addEventListener('open', () => {\n      socket.send(JSON.stringify({ type: \"all\" }))\n    })\n\n    socket.addEventListener('error', (event) => {\n      console.error('ERROR: ' + event)\n    })\n\n    socket.addEventListener('message', (event) => {\n      const msg = JSON.parse(event.data)\n      const { messages } = this.state\n      console.log(msg)\n\n      if (msg.type === \"messages\") {\n        this.setState({ messages: [...messages, ...msg.messages ]})\n      } else {\n        this.setState({ messages: [...messages, msg.message ]})\n      }\n    })\n\n    window.addEventListener('error', (event) => {\n      const error = event.detail\n\n      if (error.type === \"new\") {\n        this.setState({ \n          error: true,\n          errorMessage: error.message\n        })\n      } else {\n        this.setState({ error: false })\n      }\n    })\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.state.error && <Error message={this.state.errorMessage} />}\n        <Username />\n        <div className=\"message-app\">\n          <Messages messages={this.state.messages} />\n          <MessageForm />\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}